{"kind":"Notebook","sha256":"e866c9501f3f81efb556f451524cc40b3d8e8b48fef2a56a23b4ec58f7568781","slug":"eq-plots","location":"/Figures_Draft3/Fig3_Equilibration/CytoSys/EQ_Plots.ipynb","dependencies":[],"frontmatter":{"keywords":[],"exports":[{"format":"ipynb","filename":"EQ_Plots.ipynb","url":"/EQ_Plots-5ede0c4910e39bb5849034b7700edaef.ipynb"}]},"mdast":{"type":"root","children":[{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Increase the font size and bold the text for titles and axis labels globally\nplt.rcParams.update({\n    'axes.titlesize': 15,  # Increase the font size of the title\n    'axes.titleweight': 'bold',  # Bold the title font\n    'axes.labelsize': 15,  # Increase the font size of the axis labels\n    'axes.labelweight': 'bold',  # Bold the axis label font\n    'grid.alpha': 0.5,  # Set grid line transparency\n    'legend.fontsize': 12  # Set the legend font size\n})\n\n# Load the data from the provided files\nenergies_pre_eq = pd.read_csv('./Energies_trajectory_PreEQ.csv')\nenergies_post_eq = pd.read_csv('./Energies_trajectory_PostEQ.csv')\nthermo_pre_eq = pd.read_csv('./ThermodynamicQuantities_trajectory_PreEQ.csv')\nthermo_post_eq = pd.read_csv('./ThermodynamicQuantities_trajectory_PostEQ.csv')\n\n# Subtract the last value of pre-EQ time from post-EQ time\ntime_shift = energies_pre_eq['Time [ps]'].iloc[-1]\n\nenergies_post_eq['Time [ps]'] -= time_shift\nthermo_post_eq['Time [ps]'] -= time_shift\n\n# Create a figure and axis objects\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6), sharey=True)\n\n# Assign colors for energy and pressure plots\ncolor_energy = 'purple'\ncolor_pressure = 'green'\n\n# Plotting pre-EQ data\nax1.scatter(energies_pre_eq['Time [ps]'], energies_pre_eq['Potential Energy [kJ/mol]'], color=color_energy, label='Potential Energy', s=10)\nax1.set_ylabel('Potential Energy [kJ/mol]', color=color_energy)\nax1.tick_params(axis='y', labelcolor=color_energy)\nax1.set_xlabel('Time [ps]')\nax1.set_xscale('log')\n\n# Duplicate the x-axis for the second plot\nax2.scatter(energies_post_eq['Time [ps]'], energies_post_eq['Potential Energy [kJ/mol]'], color=color_energy, label='Potential Energy', s=10)\nax2.set_xlabel('Time [ps]')\nax2.set_xscale('log')\n\n# Plotting the pressure data on the second y-axis\nax3 = ax1.twinx()\nax3.scatter(thermo_pre_eq['Time [ps]'], thermo_pre_eq['Pressure'], color=color_pressure, label='Pressure', s=10)\nax3.set_ylabel('Pressure [atm]', color=color_pressure)\nax3.tick_params(axis='y', labelcolor=color_pressure)\n\n# Plotting the pressure data on the second y-axis for the second plot\nax4 = ax2.twinx()\nax4.scatter(thermo_post_eq['Time [ps]'], thermo_post_eq['Pressure'], color=color_pressure, label='Pressure', s=10)\nax4.tick_params(axis='y', labelcolor=color_pressure)\n\n# Set titles for subplots\nax1.set_title('Pre-EQ')\nax2.set_title('Post-EQ')\n\n# Move the legend to the bottom left of the left subplot\n#legend = ax1.legend(loc='lower left', bbox_to_anchor=(0, 1))\n\nplt.tight_layout()\n\n# Save the figure as EQ_stats.svg\nplt.savefig('EQ_stats.png')\n\nplt.show()\n","key":"uO7EaTKv3C"},{"type":"output","id":"CQRBFk7zxQcJY3T1z93BA","data":[{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"4e88c0d9b09923670ed135c4301c155b","path":"/4e88c0d9b09923670ed135c4301c155b.png"},"text/plain":{"content":"<Figure size 1500x600 with 4 Axes>","content_type":"text/plain"}}}],"key":"I4bO96aWql"}],"data":{"type":"notebook-code"},"key":"t1VHOcmCN4"}],"key":"zBwrWhhu9U"},"references":{"cite":{"order":[],"data":{}}}}