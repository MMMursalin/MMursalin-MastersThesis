{"kind":"Notebook","sha256":"faab5f84130ab6a89ba8c0c8b5c734296020a3a8a13988b9454d2fdf3865b287","slug":"blank-maker","location":"/Figures_Draft3/Fig10_Sym-ParamScan/Blank Maker.ipynb","dependencies":[],"frontmatter":{"keywords":[],"exports":[{"format":"ipynb","filename":"Blank Maker.ipynb","url":"/Blank Maker-0a5e05bbd93dab3aed82977261a77224.ipynb"}]},"mdast":{"type":"root","children":[{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"import matplotlib.pyplot as plt\n\n# Create a square figure and axis\nfig, ax = plt.subplots(figsize=(6, 6))  # Making the figure square in size\nax.set_aspect('equal', 'box')  # Ensure the aspect ratio inside the plot is equal\n\n# Custom positions for x-axis and y-axis ticks\nax.set_xticks([0, .5, 1])\nax.set_yticks([0, 0.5, 1])\n\n# Setting custom labels for ticks\nax.set_xticklabels(['1/2', '1', '5'])\nax.set_yticklabels(['10', '1', '1/10'])\n\n# Labels for x and y axes\nax.set_xlabel(r'Interaction Strength $\\epsilon/\\epsilon_0$')\nax.set_ylabel(r'Inverse Screening Length $K_0/K$')\n\n# Removing the top and right spines and positioning the left and bottom spines\nax.spines['top'].set_color('none')\nax.spines['right'].set_color('none')\nax.spines['left'].set_position(('data', 0))\nax.spines['bottom'].set_position(('data', 0))\n\n# Adding light grey dashed lines for both vertical and horizontal markers\nax.axvline(x=0.33, color='lightgrey', linestyle='--')\nax.axvline(x=0.66, color='lightgrey', linestyle='--')\nax.axhline(y=0.33, color='lightgrey', linestyle='--')\nax.axhline(y=0.66, color='lightgrey', linestyle='--')\n\n# Adding a title\nplt.title('Net Negative System', color='Red', fontsize=16, fontweight='bold')\n\n# Saving the figure as an SVG file\nplt.savefig('Custom1_Blank_Graph_Square.svg', format='svg')\n","key":"gMYN9Wt82W"},{"type":"output","id":"q7juNmdK28q9xLacUUmJT","data":[{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"953c3cb6a4faf36cc396f90f0eb82895","path":"/953c3cb6a4faf36cc396f90f0eb82895.png"},"text/plain":{"content":"<Figure size 600x600 with 1 Axes>","content_type":"text/plain"}}}],"key":"RrurWkdYD9"}],"data":{"type":"notebook-code"},"key":"B9ZUAStxrs"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"import matplotlib.pyplot as plt\nfrom matplotlib.offsetbox import OffsetImage, AnnotationBbox\n\n# Image scale factor\nscale = 1.2\n\n# Define image positions based on alignment requirements\npositions = {\n    '0-0': (0, 0),\n    '1-0': (0.5, 0),\n    '2-0': (1, 0),\n    '0-1': (0, 0.5),\n    '1-1': (0.5, 0.5),\n    '2-1': (1, 0.5),\n    '0-2': (0, 1),\n    '1-2': (0.5, 1),\n    '2-2': (1, 1),\n}\n\n# Function to add an image at a given location with scaling\ndef add_image(ax, filepath, position, scale=1.0):\n    img = plt.imread(filepath)\n    imbox = OffsetImage(img, zoom=0.1 * scale)  # Adjust zoom based on scale\n    ab = AnnotationBbox(imbox, position, frameon=False, xycoords='data')\n    ax.add_artist(ab)\n\n# Plot configuration with custom ticks, labels, and grid lines\nfig, ax = plt.subplots()\nax.set_xticks([0, .5, 1])  # Custom positions for x-axis ticks\nax.set_yticks([0, 0.5, 1])  # Custom positions for y-axis ticks\nax.set_xticklabels(['1/2', '1', '5'])\nax.set_yticklabels(['10', '1', '1/10'])\nax.set_xlabel(r'Interaction Strength $\\epsilon/\\epsilon_0$')\nax.set_ylabel(r'Inverse Screening Length $K_0/K$')\nax.spines['top'].set_color('none')\nax.spines['right'].set_color('none')\nax.spines['left'].set_position(('data', 0))\nax.spines['bottom'].set_position(('data', 0))\n\n# Add vertical and horizontal lines\nax.axvline(x=0.33, color='lightgrey', linestyle='--')\nax.axvline(x=0.66, color='lightgrey', linestyle='--')\nax.axhline(y=0.33, color='lightgrey', linestyle='--')\nax.axhline(y=0.66, color='lightgrey', linestyle='--')\n\n# Adjust figure bounds to make room for images\nax.set_xlim(-0.1, 1.1)\nax.set_ylim(-0.1, 1.1)\n\n# Add images according to the defined positions\nfor key, position in positions.items():\n    filepath = f'{key}.png'  # Assume images are named 'x-y.png'\n    add_image(ax, filepath, position, scale=scale)\n\n# Save the figure with the plot and images\nplt.savefig('Graph_with_Images_and_Custom_Plot.svg', format='svg')\n","key":"tqYg3JQiXg"},{"type":"output","id":"WZy1P_xPfUVf5RiPevWhK","data":[{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"2dfc26da252ba714daf3c5ce5e4400cc","path":"/2dfc26da252ba714daf3c5ce5e4400cc.png"},"text/plain":{"content":"<Figure size 640x480 with 1 Axes>","content_type":"text/plain"}}}],"key":"RvxpDjAcPf"}],"data":{"type":"notebook-code"},"key":"p9UfcqMUAy"}],"key":"l3GJVjRF5b"},"references":{"cite":{"order":[],"data":{}}}}