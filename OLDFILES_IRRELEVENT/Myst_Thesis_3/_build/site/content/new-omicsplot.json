{"kind":"Notebook","sha256":"7cc75f0174a6276594d04775a3c919d2408b4e436dd8dd65580309d34399bc12","slug":"new-omicsplot","location":"/Figures_Draft3/Fig1_OmicsPlot/New_OmicsPlot.ipynb","dependencies":[],"frontmatter":{"keywords":[],"exports":[{"format":"ipynb","filename":"New_OmicsPlot.ipynb","url":"/New_OmicsPlot-b5515223b04043efd065cd4e5818ed19.ipynb"}]},"mdast":{"type":"root","children":[{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom mpl_toolkits.mplot3d import Axes3D\n\n# Load the Excel file\nfile_path = \"SpeciesList_Annotated.ods\"\ndf = pd.read_excel(file_path)\n\n# Extract data from columns using positional indices\nradii = pd.to_numeric(df.iloc[:, 4], errors='coerce')\ncharge = pd.to_numeric(df.iloc[:, 1], errors='coerce')\nn_copies = pd.to_numeric(df.iloc[:, 3], errors='coerce')\ntags = df.iloc[:, 5]\n\n# Custom symmetric log function\ndef symlog(x, linthresh=1):\n    is_negative = x < 0\n    abs_x = np.abs(x)\n    abs_x = np.where(x == 0, 0, np.where(abs_x < linthresh, linthresh, np.log10(abs_x)))\n    return np.where(is_negative, -abs_x, abs_x)\n\n# Transform charges\ncharge_transformed = symlog(charge)\n\n# Convert tags to discrete colors\nunique_tags = tags.unique()\ncolors = plt.cm.tab20(np.linspace(0, 1, len(unique_tags)))\ntag_to_color = {tag: color for tag, color in zip(unique_tags, colors)}\ntag_colors = tags.map(tag_to_color)\n\n# 3D Orthographic Plot\nfig_3d = plt.figure(figsize=(8, 8))\nax1 = fig_3d.add_subplot(111, projection='3d')\nfor tag, color in tag_to_color.items():\n    mask = tags == tag\n    ax1.scatter(radii[mask], charge_transformed[mask], np.log(n_copies[mask]), color=color, s=50, edgecolors='k', linewidths=0.5)\nax1.set_xlabel('Radii [nm]')\nax1.set_ylabel('Sym. Log Charge [Elementary Charge]')\nax1.set_zlabel('Log N Copies')\nax1.ticklabel_format(style='sci', axis='y', scilimits=(0,0))\nax1.ticklabel_format(style='plain', axis='z', scilimits=(0,0))\nax1.view_init(elev=30, azim=300)\nax1.grid(True)\nax1.set_facecolor('white')\nfig_3d.savefig('Full_Number_3D_Orthographic_Plot.svg')\nplt.show()\n\n# 2D Projection - Radii and Charge\nfig_2d_rc = plt.figure(figsize=(8, 8))\nax2 = fig_2d_rc.add_subplot(111)\nfor tag, color in tag_to_color.items():\n    mask = tags == tag\n    ax2.scatter(radii[mask], charge_transformed[mask], color=color, s=50, edgecolors='k', linewidths=0.5)\nax2.set_xlabel('Radii [nm]')\nax2.set_ylabel('Sym. Log Charge [Elementary Charge]')\nax2.ticklabel_format(style='sci', axis='y', scilimits=(0,0))\nax2.grid(True, which='both', linestyle='--', linewidth=0.5)\nax2.set_facecolor('white')\nfig_2d_rc.savefig('Full_Number_2D_Projection_Radii_Charge.svg')\nplt.show()\n\n# 2D Projection - Log N Copies & Radii\nfig_2d_ac = plt.figure(figsize=(8, 8))\nax3 = fig_2d_ac.add_subplot(111)\nfor tag, color in tag_to_color.items():\n    mask = tags == tag\n    ax3.scatter(radii[mask], np.log(n_copies[mask]), color=color, s=50, edgecolors='k', linewidths=0.5)\nax3.set_xlabel('Radii [nm]')\nax3.set_ylabel('Log N Copies')\nax3.ticklabel_format(style='plain', axis='y', scilimits=(0,0))\nax3.grid(True, which='both', linestyle='--', linewidth=0.5)\nax3.set_facecolor('white')\nfig_2d_ac.savefig('Full_Number_2D_Projection_Radii_Abundance.svg')\nplt.show()\n\n# 2D Projection - Log N Copies & Sym. Log Charge\nfig_2d_ar = plt.figure(figsize=(8, 8))\nax4 = fig_2d_ar.add_subplot(111)\nfor tag, color in tag_to_color.items():\n    mask = tags == tag\n    ax4.scatter(charge_transformed[mask], np.log(n_copies[mask]), color=color, s=50, edgecolors='k', linewidths=0.5)\nax4.set_xlabel('Sym. Log Charge [Elementary Charge]')\nax4.set_ylabel('Log N Copies')\nax4.ticklabel_format(style='sci', axis='x', scilimits=(0,0))\nax4.grid(True, which='both', linestyle='--', linewidth=0.5)\nax4.set_facecolor('white')\nfig_2d_ar.savefig('Full_Number_2D_Projection_Charge_Abundance.svg')\nplt.show()\n\n# Creating and saving a separate plot for the legend\nfig_legend = plt.figure(figsize=(6, 4))\nax_legend = fig_legend.add_subplot(111)\n# Create dummy lines for the legend\nlegend_lines = [plt.Line2D([0], [0], color=color, lw=4) for color in tag_to_color.values()]\n# Add the legend to the plot\nax_legend.legend(legend_lines, unique_tags, loc='center')\nax_legend.axis('off')  # Hide the axes\nfig_legend.savefig('Full_Number_Plot_Legend.svg')\nplt.show()","key":"LLSnJHNDlG"},{"type":"output","id":"I3MM90rEUuGGMUKOdUVhJ","data":[{"name":"stderr","output_type":"stream","text":"/usr/lib64/python3.11/site-packages/pandas/core/arraylike.py:402: RuntimeWarning: divide by zero encountered in log10\n  result = getattr(ufunc, method)(*inputs, **kwargs)\n"},{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"31d226aba985a03e2336883291a44a1e","path":"/31d226aba985a03e2336883291a44a1e.png"},"text/plain":{"content":"<Figure size 800x800 with 1 Axes>","content_type":"text/plain"}}},{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"a984a6643cb3de47e86777e0706cae93","path":"/a984a6643cb3de47e86777e0706cae93.png"},"text/plain":{"content":"<Figure size 800x800 with 1 Axes>","content_type":"text/plain"}}},{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"30df4b037ac2f734533f33631142d012","path":"/30df4b037ac2f734533f33631142d012.png"},"text/plain":{"content":"<Figure size 800x800 with 1 Axes>","content_type":"text/plain"}}},{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"645839447077d2d252a4c8f70ddd26e9","path":"/645839447077d2d252a4c8f70ddd26e9.png"},"text/plain":{"content":"<Figure size 800x800 with 1 Axes>","content_type":"text/plain"}}},{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"3342a760e4f5960d6ac4ad117847a438","path":"/3342a760e4f5960d6ac4ad117847a438.png"},"text/plain":{"content":"<Figure size 600x400 with 1 Axes>","content_type":"text/plain"}}}],"key":"dp8s16wFnT"}],"data":{"type":"notebook-code","scrolled":true},"key":"BTzKl96Zv4"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom mpl_toolkits.mplot3d import Axes3D\n\n# Load the Excel file\nfile_path = \"SpeciesList-NoIons_Annotated.ods\"\ndf = pd.read_excel(file_path)\n\n# Extract data from columns using positional indices\nradii = pd.to_numeric(df.iloc[:, 4], errors='coerce')\ncharge = pd.to_numeric(df.iloc[:, 1], errors='coerce')\nn_copies = pd.to_numeric(df.iloc[:, 3], errors='coerce')\ntags = df.iloc[:, 5]\n\n# Custom symmetric log function\ndef symlog(x, linthresh=1):\n    is_negative = x < 0\n    abs_x = np.abs(x)\n    abs_x = np.where(x == 0, 0, np.where(abs_x < linthresh, linthresh, np.log10(abs_x)))\n    return np.where(is_negative, -abs_x, abs_x)\n\n# Transform charges\ncharge_transformed = symlog(charge)\n\n# Convert tags to discrete colors\nunique_tags = tags.unique()\ncolors = plt.cm.tab20(np.linspace(0, 1, len(unique_tags)))\ntag_to_color = {tag: color for tag, color in zip(unique_tags, colors)}\n\n# 3D Orthographic Plot\nfig_3d = plt.figure(figsize=(8, 8))\nax1 = fig_3d.add_subplot(111, projection='3d')\nfor tag, color in tag_to_color.items():\n    mask = tags == tag\n    ax1.scatter(radii[mask], charge_transformed[mask], np.log(n_copies[mask]), color=color, s=50, edgecolors='k', linewidths=0.5)\nax1.set_xlabel('Radii [nm]')\nax1.set_ylabel('Sym. Log Charge [Elementary Charge]')\nax1.set_zlabel('Log N Copies')\nax1.ticklabel_format(style='sci', axis='y', scilimits=(0,0))\nax1.ticklabel_format(style='plain', axis='z', scilimits=(0,0))\nax1.view_init(elev=30, azim=300)\nax1.grid(True)\nax1.set_facecolor('white')\nfig_3d.savefig('NoWat_Number_3D_Orthographic_Plot.svg')\nplt.show()\n\n# 2D Projection - Radii and Charge\nfig_2d_rc = plt.figure(figsize=(8, 8))\nax2 = fig_2d_rc.add_subplot(111)\nfor tag, color in tag_to_color.items():\n    mask = tags == tag\n    ax2.scatter(radii[mask], charge_transformed[mask], color=color, s=50, edgecolors='k', linewidths=0.5)\nax2.set_xlabel('Radii [nm]')\nax2.set_ylabel('Sym. Log Charge [Elementary Charge]')\nax2.ticklabel_format(style='sci', axis='y', scilimits=(0,0))\nax2.grid(True, which='both', linestyle='--', linewidth=0.5)\nax2.set_facecolor('white')\nfig_2d_rc.savefig('NoWat_Number_2D_Projection_Radii_Charge.svg')\nplt.show()\n\n# 2D Projection - Log N Copies & Radii\nfig_2d_ac = plt.figure(figsize=(8, 8))\nax3 = fig_2d_ac.add_subplot(111)\nfor tag, color in tag_to_color.items():\n    mask = tags == tag\n    ax3.scatter(radii[mask], np.log(n_copies[mask]), color=color, s=50, edgecolors='k', linewidths=0.5)\nax3.set_xlabel('Radii [nm]')\nax3.set_ylabel('Log N Copies')\nax3.ticklabel_format(style='plain', axis='y', scilimits=(0,0))\nax3.grid(True, which='both', linestyle='--', linewidth=0.5)\nax3.set_facecolor('white')\nfig_2d_ac.savefig('NoWat_Number_2D_Projection_Radii_Abundance.svg')\nplt.show()\n\n# 2D Projection - Log N Copies & Sym. Log Charge\nfig_2d_ar = plt.figure(figsize=(8, 8))\nax4 = fig_2d_ar.add_subplot(111)\nfor tag, color in tag_to_color.items():\n    mask = tags == tag\n    ax4.scatter(charge_transformed[mask], np.log(n_copies[mask]), color=color, s=50, edgecolors='k', linewidths=0.5)\nax4.set_xlabel('Sym. Log Charge [Elementary Charge]')\nax4.set_ylabel('Log N Copies')\nax4.ticklabel_format(style='sci', axis='x', scilimits=(0,0))\nax4.grid(True, which='both', linestyle='--', linewidth=0.5)\nax4.set_facecolor('white')\nfig_2d_ar.savefig('NoWat_Number_2D_Projection_Charge_Abundance.svg')\nplt.show()\n\n# Creating and saving a separate plot for the legend\nfig_legend = plt.figure(figsize=(6, 4))\nax_legend = fig_legend.add_subplot(111)\n# Create dummy lines for the legend\nlegend_lines = [plt.Line2D([0], [0], color=color, lw=4) for color in tag_to_color.values()]\n# Add the legend to the plot\nax_legend.legend(legend_lines, unique_tags, loc='center')\nax_legend.axis('off')  # Hide the axes\nfig_legend.savefig('NoWat_Number_Plot_Legend.svg')\nplt.show()","key":"OOv9xqXWTg"},{"type":"output","id":"cbYRAoPMxBqTFUizqz-iI","data":[{"name":"stderr","output_type":"stream","text":"/usr/lib64/python3.11/site-packages/pandas/core/arraylike.py:402: RuntimeWarning: divide by zero encountered in log10\n  result = getattr(ufunc, method)(*inputs, **kwargs)\n"},{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"5c58b2812890886a77628165c2536add","path":"/5c58b2812890886a77628165c2536add.png"},"text/plain":{"content":"<Figure size 800x800 with 1 Axes>","content_type":"text/plain"}}},{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"64d79b9e458aa71dfb1ee9e530af7385","path":"/64d79b9e458aa71dfb1ee9e530af7385.png"},"text/plain":{"content":"<Figure size 800x800 with 1 Axes>","content_type":"text/plain"}}},{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"8b59935da0f1d6666fa58238c0d04763","path":"/8b59935da0f1d6666fa58238c0d04763.png"},"text/plain":{"content":"<Figure size 800x800 with 1 Axes>","content_type":"text/plain"}}},{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"c1099e20368468d720649c48d8474c9a","path":"/c1099e20368468d720649c48d8474c9a.png"},"text/plain":{"content":"<Figure size 800x800 with 1 Axes>","content_type":"text/plain"}}},{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"8341328adf4e883407295d18e7bf0aa3","path":"/8341328adf4e883407295d18e7bf0aa3.png"},"text/plain":{"content":"<Figure size 600x400 with 1 Axes>","content_type":"text/plain"}}}],"key":"u86SHYWSKB"}],"data":{"type":"notebook-code","scrolled":true},"key":"TL0JTOC5KK"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom mpl_toolkits.mplot3d import Axes3D\n\n# Load the Excel file\nfile_path = \"SpeciesList_Annotated.ods\"\ndf = pd.read_excel(file_path)\n\n# Extract data from columns using positional indices\nradii = pd.to_numeric(df.iloc[:, 4], errors='coerce')\ncharge = pd.to_numeric(df.iloc[:, 1], errors='coerce')\nn_copies = pd.to_numeric(df.iloc[:, 3], errors='coerce')\ntags = df.iloc[:, 5]\n\n# Custom symmetric log function\ndef symlog(x, linthresh=1):\n    is_negative = x < 0\n    abs_x = np.abs(x)\n    abs_x = np.where(x == 0, 0, np.where(abs_x < linthresh, linthresh, np.log10(abs_x)))\n    return np.where(is_negative, -abs_x, abs_x)\n\n# Calculate volume fraction\ntotal_volume = np.pi * np.power(radii, 3) * n_copies.sum()\nvolume_fraction = ((4/3) * np.pi * np.power(radii, 3) * n_copies) / total_volume\nlog_volume_fraction = np.log(volume_fraction)\n\n# Convert tags to discrete colors\nunique_tags = tags.unique()\ncolors = plt.cm.tab20(np.linspace(0, 1, len(unique_tags)))\ntag_to_color = {tag: color for tag, color in zip(unique_tags, colors)}\n\n# 3D Orthographic Plot\nfig_3d = plt.figure(figsize=(8, 8))\nax1 = fig_3d.add_subplot(111, projection='3d')\nfor tag, color in tag_to_color.items():\n    mask = tags == tag\n    ax1.scatter(radii[mask], symlog(charge[mask]), log_volume_fraction[mask], color=color, s=50, edgecolors='k', linewidths=0.5)\nax1.set_xlabel('Radii [nm]')\nax1.set_ylabel('Sym. Log Charge [Elementary Charge]')\nax1.set_zlabel('Log Volume Fraction')\nax1.ticklabel_format(style='sci', axis='y', scilimits=(0,0))\nax1.ticklabel_format(style='sci', axis='z', scilimits=(0,0))\nax1.grid(True)\nax1.set_facecolor('white')\nfig_3d.savefig('Full_VolFrac_3D_Orthographic_Plot_VolFrac.svg')\nplt.show()\n\n# 2D Projection - Radii and Sym. Log Charge\nfig_2d_rc = plt.figure(figsize=(8, 8))\nax2 = fig_2d_rc.add_subplot(111)\nfor tag, color in tag_to_color.items():\n    mask = tags == tag\n    ax2.scatter(radii[mask], symlog(charge[mask]), color=color, s=50, edgecolors='k', linewidths=0.5)\nax2.set_xlabel('Radii [nm]')\nax2.set_ylabel('Sym. Log Charge [Elementary Charge]')\nax2.ticklabel_format(style='sci', axis='y', scilimits=(0,0))\nax2.grid(True, which='both', linestyle='--', linewidth=0.5)\nax2.set_facecolor('white')\nfig_2d_rc.savefig('Full_VolFrac_2D_Projection_Radii_Charge_VolFrac.svg')\nplt.show()\n\n# 2D Projection - Radii and Log Volume Fraction\nfig_2d_rv = plt.figure(figsize=(8, 8))\nax3 = fig_2d_rv.add_subplot(111)\nfor tag, color in tag_to_color.items():\n    mask = tags == tag\n    ax3.scatter(radii[mask], log_volume_fraction[mask], color=color, s=50, edgecolors='k', linewidths=0.5)\nax3.set_xlabel('Radii [nm]')\nax3.set_ylabel('Log Volume Fraction')\nax3.ticklabel_format(style='sci', axis='y', scilimits=(0,0))\nax3.grid(True, which='both', linestyle='--', linewidth=0.5)\nax3.set_facecolor('white')\nfig_2d_rv.savefig('Full_VolFrac_2D_Projection_Radii_VolFrac.svg')\nplt.show()\n\n# 2D Projection - Sym. Log Charge and Log Volume Fraction\nfig_2d_cv = plt.figure(figsize=(8, 8))\nax4 = fig_2d_cv.add_subplot(111)\nfor tag, color in tag_to_color.items():\n    mask = tags == tag\n    ax4.scatter(symlog(charge[mask]), log_volume_fraction[mask], color=color, s=50, edgecolors='k', linewidths=0.5)\nax4.set_xlabel('Sym. Log Charge [Elementary Charge]')\nax4.set_ylabel('Log Volume Fraction')\nax1.ticklabel_format(style='sci', axis='y', scilimits=(0,0))\nax1.ticklabel_format(style='sci', axis='z', scilimits=(0,0))\nax4.grid(True, which='both', linestyle='--', linewidth=0.5)\nax4.set_facecolor('white')\nfig_2d_cv.savefig('Full_VolFrac_2D_Projection_Charge_VolFrac.svg')\nplt.show()\n\n# Creating and saving a separate plot for the legend\nfig_legend = plt.figure(figsize=(6, 4))\nax_legend = fig_legend.add_subplot(111)\nax_legend.legend([plt.Line2D([0], [0], color=color, lw=4) for color in tag_to_color.values()], unique_tags, loc='center')\nax_legend.axis('off')\nfig_legend.savefig('Full_VolFrac_Plot_Legend_VolFrac.svg')\nplt.show()\n","key":"AJEDqgI1zU"},{"type":"output","id":"m031fDTS4foK5Y7h_4Zgy","data":[{"name":"stderr","output_type":"stream","text":"/usr/lib64/python3.11/site-packages/pandas/core/arraylike.py:402: RuntimeWarning: divide by zero encountered in log10\n  result = getattr(ufunc, method)(*inputs, **kwargs)\n"},{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"d0159cc7b5dce4943da89d73f1dab05d","path":"/d0159cc7b5dce4943da89d73f1dab05d.png"},"text/plain":{"content":"<Figure size 800x800 with 1 Axes>","content_type":"text/plain"}}},{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"a984a6643cb3de47e86777e0706cae93","path":"/a984a6643cb3de47e86777e0706cae93.png"},"text/plain":{"content":"<Figure size 800x800 with 1 Axes>","content_type":"text/plain"}}},{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"328c7d4c700ab319d875e81a616abdee","path":"/328c7d4c700ab319d875e81a616abdee.png"},"text/plain":{"content":"<Figure size 800x800 with 1 Axes>","content_type":"text/plain"}}},{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"cf6f4ea6f1ac803cafb21a0b480b838b","path":"/cf6f4ea6f1ac803cafb21a0b480b838b.png"},"text/plain":{"content":"<Figure size 800x800 with 1 Axes>","content_type":"text/plain"}}},{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"3342a760e4f5960d6ac4ad117847a438","path":"/3342a760e4f5960d6ac4ad117847a438.png"},"text/plain":{"content":"<Figure size 600x400 with 1 Axes>","content_type":"text/plain"}}}],"key":"Sqtr6E1BrH"}],"data":{"type":"notebook-code"},"key":"dE4K6inppQ"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom mpl_toolkits.mplot3d import Axes3D\n\n# Load the Excel file\nfile_path = \"SpeciesList-NoIons_Annotated.ods\"\ndf = pd.read_excel(file_path)\n\n# Extract data from columns using positional indices\nradii = pd.to_numeric(df.iloc[:, 4], errors='coerce')\ncharge = pd.to_numeric(df.iloc[:, 1], errors='coerce')\nn_copies = pd.to_numeric(df.iloc[:, 3], errors='coerce')\ntags = df.iloc[:, 5]\n\n# Custom symmetric log function\ndef symlog(x, linthresh=1):\n    is_negative = x < 0\n    abs_x = np.abs(x)\n    abs_x = np.where(x == 0, 0, np.where(abs_x < linthresh, linthresh, np.log10(abs_x)))\n    return np.where(is_negative, -abs_x, abs_x)\n\n# Calculate volume fraction\ntotal_volume = np.pi * np.power(radii, 3) * n_copies.sum()\nvolume_fraction = ((4/3) * np.pi * np.power(radii, 3) * n_copies) / total_volume\nlog_volume_fraction = np.log(volume_fraction)\n\n# Convert tags to discrete colors\nunique_tags = tags.unique()\ncolors = plt.cm.tab20(np.linspace(0, 1, len(unique_tags)))\ntag_to_color = {tag: color for tag, color in zip(unique_tags, colors)}\n\n# 3D Orthographic Plot\nfig_3d = plt.figure(figsize=(8, 8))\nax1 = fig_3d.add_subplot(111, projection='3d')\nfor tag, color in tag_to_color.items():\n    mask = tags == tag\n    ax1.scatter(radii[mask], symlog(charge[mask]), log_volume_fraction[mask], color=color, s=50, edgecolors='k', linewidths=0.5)\nax1.set_xlabel('Radii [nm]')\nax1.set_ylabel('Sym. Log Charge [Elementary Charge]')\nax1.set_zlabel('Log Volume Fraction')\nax1.ticklabel_format(style='sci', axis='y', scilimits=(0,0))\nax1.ticklabel_format(style='sci', axis='z', scilimits=(0,0))\nax1.grid(True)\nax1.set_facecolor('white')\nfig_3d.savefig('NoWat_VolFrac_3D_Orthographic_Plot_NoIons_VolFrac.svg')\nplt.show()\n\n# 2D Projection - Radii and Sym. Log Charge\nfig_2d_rc = plt.figure(figsize=(8, 8))\nax2 = fig_2d_rc.add_subplot(111)\nfor tag, color in tag_to_color.items():\n    mask = tags == tag\n    ax2.scatter(radii[mask], symlog(charge[mask]), color=color, s=50, edgecolors='k', linewidths=0.5)\nax2.set_xlabel('Radii [nm]')\nax2.set_ylabel('Sym. Log Charge [Elementary Charge]')\nax2.ticklabel_format(style='sci', axis='y', scilimits=(0,0))\nax2.grid(True, which='both', linestyle='--', linewidth=0.5)\nax2.set_facecolor('white')\nfig_2d_rc.savefig('NoWat_VolFrac_2D_Projection_Radii_Charge_NoIons_VolFrac.svg')\nplt.show()\n\n# 2D Projection - Radii and Log Volume Fraction\nfig_2d_rv = plt.figure(figsize=(8, 8))\nax3 = fig_2d_rv.add_subplot(111)\nfor tag, color in tag_to_color.items():\n    mask = tags == tag\n    ax3.scatter(radii[mask], log_volume_fraction[mask], color=color, s=50, edgecolors='k', linewidths=0.5)\nax3.set_xlabel('Radii [nm]')\nax3.set_ylabel('Log Volume Fraction')\nax1.ticklabel_format(style='sci', axis='y', scilimits=(0,0))\nax3.grid(True, which='both', linestyle='--', linewidth=0.5)\nax3.set_facecolor('white')\nfig_2d_rv.savefig('NoWat_VolFrac_2D_Projection_Radii_VolFrac_NoIons.svg')\nplt.show()\n\n# 2D Projection - Sym. Log Charge and Log Volume Fraction\nfig_2d_cv = plt.figure(figsize=(8, 8))\nax4 = fig_2d_cv.add_subplot(111)\nfor tag, color in tag_to_color.items():\n    mask = tags == tag\n    ax4.scatter(symlog(charge[mask]), log_volume_fraction[mask], color=color, s=50, edgecolors='k', linewidths=0.5)\nax4.set_xlabel('Sym. Log Charge [Elementary Charge]')\nax4.set_ylabel('Log Volume Fraction')\nax1.ticklabel_format(style='sci', axis='y', scilimits=(0,0))\nax4.grid(True, which='both', linestyle='--', linewidth=0.5)\nax4.set_facecolor('white')\nfig_2d_cv.savefig('NoWat_VolFrac_2D_Projection_Charge_VolFrac_NoIons.svg')\nplt.show()\n\n# Creating and saving a separate plot for the legend\nfig_legend = plt.figure(figsize=(6, 4))\nax_legend = fig_legend.add_subplot(111)\nax_legend.legend([plt.Line2D([0], [0], color=color, lw=4) for color in tag_to_color.values()], unique_tags, loc='center')\nax_legend.axis('off')\nfig_legend.savefig('NoWat_VolFrac_Plot_Legend_NoIons_VolFrac.svg')\nplt.show()\n","key":"oDv6CSYi4I"},{"type":"output","id":"e5fTPEjR1eKsIoTlAhK4-","data":[{"name":"stderr","output_type":"stream","text":"/usr/lib64/python3.11/site-packages/pandas/core/arraylike.py:402: RuntimeWarning: divide by zero encountered in log10\n  result = getattr(ufunc, method)(*inputs, **kwargs)\n"},{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"4cd04f97eb2b5c2a02af8f03e7673b36","path":"/4cd04f97eb2b5c2a02af8f03e7673b36.png"},"text/plain":{"content":"<Figure size 800x800 with 1 Axes>","content_type":"text/plain"}}},{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"64d79b9e458aa71dfb1ee9e530af7385","path":"/64d79b9e458aa71dfb1ee9e530af7385.png"},"text/plain":{"content":"<Figure size 800x800 with 1 Axes>","content_type":"text/plain"}}},{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"95a0e9747a370f5f3ef7904063032302","path":"/95a0e9747a370f5f3ef7904063032302.png"},"text/plain":{"content":"<Figure size 800x800 with 1 Axes>","content_type":"text/plain"}}},{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"59be49bac0f56b8d6c2a712d035938ce","path":"/59be49bac0f56b8d6c2a712d035938ce.png"},"text/plain":{"content":"<Figure size 800x800 with 1 Axes>","content_type":"text/plain"}}},{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"8341328adf4e883407295d18e7bf0aa3","path":"/8341328adf4e883407295d18e7bf0aa3.png"},"text/plain":{"content":"<Figure size 600x400 with 1 Axes>","content_type":"text/plain"}}}],"key":"x9uNFljkgQ"}],"data":{"type":"notebook-code"},"key":"E1W8MOPXke"}],"key":"g4z0mXxo4c"},"references":{"cite":{"order":[],"data":{}}}}