{"kind":"Notebook","sha256":"65e3d55b701e11e466599e74a6092e5c09d9883b79d63e9d041cdbf13ac6b4c9","slug":"trajplotter-2","location":"/Figures_Draft3/Fig6_TestSys/TrajPlotter.ipynb","dependencies":[],"frontmatter":{"keywords":[],"exports":[{"format":"ipynb","filename":"TrajPlotter.ipynb","url":"/TrajPlotter-6a6ee8c349176e4aa6711f325f4b9a69.ipynb"}]},"mdast":{"type":"root","children":[{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport glob\n\n# Increase the font size and bold the text for titles and axis labels globally\nplt.rcParams.update({\n    'axes.titlesize': 15,  # Increase the font size of the title\n    'axes.titleweight': 'bold',  # Bold the title font\n    'axes.labelsize': 15,  # Increase the font size of the axis labels\n    'axes.labelweight': 'bold',  # Bold the axis label font\n    'grid.alpha': 0.5,  # Set grid line transparency\n    'legend.fontsize': 12  # Set the legend font size\n})\n\n# Constants\nkT = float(1)        # Thermal energy\nViscosity = float(1)  # Viscosity of the medium\n\n# Define the directory where the files are located\ndirectory = './'\n\n# Find all csv files in the specified directory that contain \"Sys\" and end with \".csv\"\nsys_csv_files = glob.glob(directory + '*Sys*.csv')\n\n# Assuming you want to read the first file that matches the pattern\nif sys_csv_files:  # Check if the list is not empty\n    sys_data = pd.read_csv(sys_csv_files[0])\n    print(f\"Loaded data from {sys_csv_files[0]}\")\nelse:\n    print(\"No files found matching the pattern *Sys*.csv\")\n\n# Correcting the column name and reprocessing the data\nsys_data = sys_data.rename(columns={' Radius': 'Radius'})\n\n# Define thresholds for small, medium, and large categories\nsmall_threshold = 1.0    # Example threshold, adjust as needed\nmedium_threshold = 5.0   # Example threshold, adjust as needed\n\n# Function to categorize radius\ndef categorize_radius(radius):\n    if radius <= small_threshold:\n        return 'small'\n    elif radius <= medium_threshold:\n        return 'medium'\n    else:\n        return 'large'\n\n# Group species by categorized radius\nsys_data['Category'] = sys_data['Radius'].apply(categorize_radius)\ngrouped_species = sys_data.groupby('Category').apply(lambda x: list(x['Name'])).to_dict()\n\n# Map species to charge and radius\nspecies_charge = sys_data.set_index('Name')['Charge'].to_dict()\nspecies_radius = sys_data.set_index('Name')['Radius'].to_dict()\n\n# Define marker and linestyle for each species\nmarker_styles = ['.', 'v', '1', 'P', '*', 'X']  # Example marker styles\nlinestyle_styles = ['-', '--', '-.', ':', (0, (3, 1, 1, 1))]  # Example line styles\n\ndef find_msd_files(species_name, directory='.'):\n    \"\"\"\n    Finds MSD files for a given species in the specified directory.\n    Files should be named in the format 'MSD_{SpeciesName}_trajectory_*.csv'.\n    \"\"\"\n    pattern = f'MSD_{species_name}_trajectory_'\n    return [os.path.join(directory, f) for f in os.listdir(directory) if f.startswith(pattern) and f.endswith('.csv')]\n\ndef plot_data(grouped_species, species_charge, species_radius, directory='.'):\n    fig, axs = plt.subplots(1, 3, figsize=(24, 8))  # Create 3 subplots side by side\n    categories = ['small', 'medium', 'large']  # Ensure we plot in the order of increasing particle size\n\n    for ax, category in zip(axs, categories):\n        species_list = grouped_species.get(category, [])\n        ax.set_xscale('log')\n        ax.set_yscale('log')\n\n        # Assign a unique marker and linestyle to each species\n        for i, species in enumerate(species_list):\n            files = find_msd_files(species, directory)\n            marker = marker_styles[i % len(marker_styles)]\n            linestyle = linestyle_styles[i % len(linestyle_styles)]\n            color = 'blue' if species_charge[species] > 0 else 'red' if species_charge[species] < 0 else 'gray'\n            label_data = f'{species} (Charge: {species_charge[species]}) - Data'\n\n            for file in files:\n                data = pd.read_csv(file)\n                time = data.iloc[:, 0]\n                msd = data.iloc[:, 1]\n                \n                # Plotting data points\n                ax.scatter(time, msd, label=label_data, color=color, marker=marker, s=5)\n\n                # Calculate D_Exp for current species and plot trend line\n                D_Exp = kT / (Viscosity * np.pi * species_radius[species])\n                x_trend = time\n                y_trend = D_Exp * x_trend\n                ax.plot(x_trend, y_trend, color=color, linestyle=linestyle)\n\n        ax.set_xlabel('Log Time [ps]')\n        ax.set_ylabel('Log MSD [nm^2]')\n        ax.set_title(f' {category.capitalize()} particles')\n        ax.legend(loc='upper left')\n\n    plt.tight_layout()\n    plt.savefig('Combined_MSD.png', format='png')\n    plt.show()\n\n# Example usage\nplot_data(grouped_species, species_charge, species_radius, directory)\n","key":"pzCzAzRfQ1"},{"type":"output","id":"Ni1whtgvxyHyXTruCEczb","data":[{"name":"stdout","output_type":"stream","text":"Loaded data from ./TestSys.csv\n"},{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"04609a5fbdd9fe089335e3b40c28222b","path":"/04609a5fbdd9fe089335e3b40c28222b.png"},"text/plain":{"content":"<Figure size 2400x800 with 3 Axes>","content_type":"text/plain"}}}],"key":"fwLD0vvR1X"}],"data":{"type":"notebook-code","scrolled":false},"key":"XgvGFOXOPs"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy.stats import lognorm\n\n# Increase the font size and bold the text for titles and axis labels globally\nplt.rcParams.update({\n    'axes.titlesize': 15,  # Increase the font size of the title\n    'axes.titleweight': 'bold',  # Bold the title font\n    'axes.labelsize': 15,  # Increase the font size of the axis labels\n    'axes.labelweight': 'bold',  # Bold the axis label font\n    'grid.alpha': 0.5,  # Set grid line transparency\n    'legend.fontsize': 12  # Set the legend font size\n})\n\nCluster_Statistics_file = './Cluster_Statistics.csv'\n\ndef plot_cluster_histograms_and_fits(file_path, fit_data=True):\n    # Load the data\n    cluster_data = pd.read_csv(file_path)\n    \n    # Initialize the plot\n    fig, ax1 = plt.subplots(figsize=(8, 8))\n\n    # Plot for Num_Constituents\n    color_num_constituents = 'forestgreen'\n    data_num_constituents = cluster_data['Num_Constituents']\n    ax1.hist(data_num_constituents, bins=100, color=color_num_constituents, log=True, alpha=0.5)\n    ax1.set_xlabel('Number of Constituents', color=color_num_constituents)\n    ax1.set_ylabel('Number of Clusters', color='black')\n    ax1.tick_params(axis='x', labelcolor=color_num_constituents)\n\n    if fit_data:\n        # Fit for Num_Constituents\n        shape_num_constituents, loc_num_constituents, scale_num_constituents = lognorm.fit(data_num_constituents, floc=0)\n        mu_num_constituents = np.log(scale_num_constituents)  # Convert scale parameter back to mu\n        sigma_num_constituents = shape_num_constituents\n        # Display equation for Num_Constituents fit on the top left\n        equation_num_constituents = f'Log-Normal($\\mu$={mu_num_constituents:.2f}, $\\sigma$={sigma_num_constituents:.2f})'\n        ax1.text(0.05, 0.95, equation_num_constituents, transform=ax1.transAxes, color=color_num_constituents, verticalalignment='top')\n\n    # Plot for Total_Charge\n    abs_charge = np.abs(cluster_data['Total_Charge'])\n    ax2 = ax1.twiny()\n    ax2.hist(-abs_charge, bins=100, color='rebeccapurple', log=True, alpha=0.5)\n    ax2.tick_params(axis='x', labelcolor='rebeccapurple')\n    ax2.xaxis.set_label_position('bottom')\n    ax2.xaxis.tick_bottom()\n    ax2.spines[\"bottom\"].set_position((\"axes\", -0.15))\n    ax2.set_xlabel('Total Charge [Elem. Charge]', color='rebeccapurple')\n\n    if fit_data:\n        # Fit for Total_Charge\n        shape_charge, loc_charge, scale_charge = lognorm.fit(abs_charge, floc=0)\n        mu_charge = np.log(scale_charge)  # Convert scale parameter back to mu\n        sigma_charge = shape_charge\n        # Display equation for Total_Charge fit on the top right\n        equation_charge = f'Log-Normal($\\mu$={mu_charge:.2f}, $\\sigma$={sigma_charge:.2f})'\n        ax2.text(0.95, 0.95, equation_charge, transform=ax2.transAxes, color='rebeccapurple', horizontalalignment='right', verticalalignment='top')\n\n    fig.tight_layout()\n    plt.savefig(f'Cluster_Histogram_Fits_Equations.png', format='png')\n    plt.show()\n\n# Example usage\nplot_cluster_histograms_and_fits(Cluster_Statistics_file, fit_data=False)  # Set fit_data=False to plot without fitting\n","key":"aWDFWeITQx"},{"type":"output","id":"6xFQsp6EOk2JuJEjNEONd","data":[{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"8e3020900b1ec6eff5a4d8c5924f1c58","path":"/8e3020900b1ec6eff5a4d8c5924f1c58.png"},"text/plain":{"content":"<Figure size 800x800 with 2 Axes>","content_type":"text/plain"}}}],"key":"d262oxPefB"}],"data":{"type":"notebook-code"},"key":"GSRQqDT7nO"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport glob\nfrom matplotlib.legend_handler import HandlerBase\nfrom matplotlib.text import Text\n\nclass TextHandler(HandlerBase):\n    def create_artists(self, legend, text , xdescent, ydescent, width, height, fontsize, trans):\n        tx = Text(width/2., height/2, text.get_text(), fontsize=fontsize, ha=\"center\", va=\"center\", rotation=90, color=text.get_color())\n        return [tx]\n\n# Increase the font size and bold the text for titles and axis labels globally\nplt.rcParams.update({\n    'axes.titlesize': 15,  # Increase the font size of the title\n    'axes.titleweight': 'bold',  # Bold the title font\n    'axes.labelsize': 15,  # Increase the font size of the axis labels\n    'axes.labelweight': 'bold',  # Bold the axis label font\n    'grid.alpha': 0.5,  # Set grid line transparency\n    'legend.fontsize': 12  # Set the legend font size\n})    \n    \n# Assuming system data and RDF data loading remains the same\n# Load system data with species, charges, and radii\nsys_csv_files = glob.glob('*Sys.csv')\nif sys_csv_files:\n    sys_data = pd.read_csv(sys_csv_files[0])\n    sys_data = sys_data.rename(columns=lambda x: x.strip())  # Ensure correct column naming\n    \n    # Categorize species by size\n    small_threshold, medium_threshold = 1.0, 5.0  # Adjust as needed\n    sys_data['Size'] = sys_data['Radius'].apply(lambda x: 'small' if x <= small_threshold else ('medium' if x <= medium_threshold else 'large'))\n    \n    # Maps\n    species_size = sys_data.set_index('Name')['Size'].to_dict()\n    species_charge = sys_data.set_index('Name')['Charge'].to_dict()\n\n# Load RDF data\nrdf_data = pd.read_csv('./RDFs.csv')  # Adjust path as needed\n\n# Define plotting settings\nline_styles = {'same': 'dotted', 'neutral': '-.', 'opposite': 'solid'}\ncolors = ['red', 'blue', 'green']  # Example color cycle for differentiation\n\n# Determine charge relationship\ndef charge_relationship(charge1, charge2):\n    if charge1 == 0 and charge2 == 0:\n        return 'neutral'\n    elif (charge1 >= 0 and charge2 >= 0) or (charge1 <= 0 and charge2 <= 0):\n        return 'same'\n    else:\n        return 'opposite'\n\n# Adjusted plotting code with new requirements\nfig, axs = plt.subplots(1, 3, figsize=(18, 6))  # Removed sharey=True for independent y-axis scales\ntitles = ['small', 'medium', 'large']\n\n# Define a cycle of colors for differentiation within subplots\ncolor_cycle = plt.cm.tab10.colors  # Using one of Matplotlib's built-in colormaps\n\nfor col in rdf_data.columns[:-1]:  # Exclude the 'r' column\n    _, i, j = col.split('_')\n    if i != j:  # Exclude pairs where i=j\n        size = species_size.get(i)\n        if size:  # Ensure size is determined\n            idx = titles.index(size)\n            charge_rel = charge_relationship(species_charge[i], species_charge[j])\n            # Get a color from the cycle based on the number of lines already plotted in this subplot\n            color = color_cycle[len(axs[idx].get_lines()) % len(color_cycle)]\n            axs[idx].plot(rdf_data['r'], rdf_data[col], linestyle=line_styles[charge_rel], color=color, label=f'{i}-{j}')\n            axs[idx].set_title(f'{size.capitalize()} Species Pairs')\n            axs[idx].set_xlabel('Distance [nm]')\n\n# Adjusting legend and labels\nfor ax in axs:\n    # Use custom handler for legend text rotation\n    handles, labels = ax.get_legend_handles_labels()\n    ax.legend(handles, labels, handler_map={Text: TextHandler()}, bbox_to_anchor=(0.5, -0.3), loc='upper center', ncol=3, borderaxespad=0.)\n\n    ax.set_ylabel('RDF [Num.]')\n\nplt.tight_layout()\nplt.savefig(\"Pairwise_RDFs_ij.png\", bbox_inches='tight')\nplt.show()\n","key":"fi6TmL3d79"},{"type":"output","id":"hegi9WEh1ViXxIjJyMeSX","data":[{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"b8c407614b0854dfb5f2a7c1641c3a52","path":"/b8c407614b0854dfb5f2a7c1641c3a52.png"},"text/plain":{"content":"<Figure size 1800x600 with 3 Axes>","content_type":"text/plain"}}}],"key":"yNpy2wyX6V"}],"data":{"type":"notebook-code"},"key":"WeQMp3iHSD"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport glob\nfrom matplotlib.legend_handler import HandlerBase\nfrom matplotlib.text import Text\n\nclass TextHandler(HandlerBase):\n    def create_artists(self, legend, text , xdescent, ydescent, width, height, fontsize, trans):\n        tx = Text(width/2., height/2, text.get_text(), fontsize=fontsize, ha=\"center\", va=\"center\", rotation=90, color=text.get_color())\n        return [tx]\n\n# Increase the font size and bold the text for titles and axis labels globally\nplt.rcParams.update({\n    'axes.titlesize': 15,  # Increase the font size of the title\n    'axes.titleweight': 'bold',  # Bold the title font\n    'axes.labelsize': 15,  # Increase the font size of the axis labels\n    'axes.labelweight': 'bold',  # Bold the axis label font\n    'grid.alpha': 0.5,  # Set grid line transparency\n    'legend.fontsize': 12  # Set the legend font size\n})    \n    \n# Assuming system data and RDF data loading remains the same\n# Load system data with species, charges, and radii\nsys_csv_files = glob.glob('*Sys.csv')\nif sys_csv_files:\n    sys_data = pd.read_csv(sys_csv_files[0])\n    sys_data = sys_data.rename(columns=lambda x: x.strip())  # Ensure correct column naming\n    \n    # Categorize species by size\n    small_threshold, medium_threshold = 1.0, 5.0  # Adjust as needed\n    sys_data['Size'] = sys_data['Radius'].apply(lambda x: 'small' if x <= small_threshold else ('medium' if x <= medium_threshold else 'large'))\n    \n    # Maps\n    species_size = sys_data.set_index('Name')['Size'].to_dict()\n    species_charge = sys_data.set_index('Name')['Charge'].to_dict()\n\n# Load RDF data\nrdf_data = pd.read_csv('./RDFs.csv')  # Adjust path as needed\n\n# Define plotting settings\nline_styles = {'same': 'dotted', 'neutral': '-.', 'opposite': 'solid'}\ncolors = ['red', 'blue', 'green']  # Example color cycle for differentiation\n\n# Determine charge relationship\ndef charge_relationship(charge1, charge2):\n    if charge1 == 0 and charge2 == 0:\n        return 'neutral'\n    elif (charge1 >= 0 and charge2 >= 0) or (charge1 <= 0 and charge2 <= 0):\n        return 'same'\n    else:\n        return 'opposite'\n\n# Adjusted plotting code with new requirements\nfig, axs = plt.subplots(1, 3, figsize=(18, 6))  # Removed sharey=True for independent y-axis scales\ntitles = ['small', 'medium', 'large']\n\n# Define a cycle of colors for differentiation within subplots\ncolor_cycle = plt.cm.tab10.colors  # Using one of Matplotlib's built-in colormaps\n\nfor col in rdf_data.columns[:-1]:  # Exclude the 'r' column\n    _, i, j = col.split('_')\n    if i == j:  # Exclude pairs where i=j\n        size = species_size.get(i)\n        if size:  # Ensure size is determined\n            idx = titles.index(size)\n            charge_rel = charge_relationship(species_charge[i], species_charge[j])\n            # Get a color from the cycle based on the number of lines already plotted in this subplot\n            color = color_cycle[len(axs[idx].get_lines()) % len(color_cycle)]\n            axs[idx].plot(rdf_data['r'], rdf_data[col], linestyle=line_styles[charge_rel], color=color, label=f'{i}-{j}')\n            axs[idx].set_title(f'{size.capitalize()} Species Pairs')\n            axs[idx].set_xlabel('Distance [nm]')\n\n# Adjusting legend and labels\nfor ax in axs:\n    # Use custom handler for legend text rotation\n    handles, labels = ax.get_legend_handles_labels()\n    ax.legend(handles, labels, handler_map={Text: TextHandler()}, bbox_to_anchor=(0.5, -0.1), loc='upper center', ncol=3, borderaxespad=0.)\n\n    ax.set_ylabel('RDF [Num.]')\n\nplt.tight_layout()\n#plt.savefig(\"Pairwise_RDFs_ij.png\", bbox_inches='tight')\nplt.show()\n","key":"wqAyCrWsOW"},{"type":"output","id":"cBYsTm3J6HzAJXfoPsjHR","data":[{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"4903e914faf401a866b511298653b422","path":"/4903e914faf401a866b511298653b422.png"},"text/plain":{"content":"<Figure size 1800x600 with 3 Axes>","content_type":"text/plain"}}}],"key":"HCnv0rQd08"}],"data":{"type":"notebook-code"},"key":"BP2KRxfeSI"}],"key":"ASCy7YDahJ"},"references":{"cite":{"order":[],"data":{}}}}