{"kind":"Notebook","sha256":"7fb2b48b7bcb2b10bf791d4f5de8d27d4f144f964bb719ab8a3c0bd655cce27c","slug":"eq-plots-2","location":"/Figures_Draft3/Fig3_Equilibration/SymTestSys/EQ_Plots.ipynb","dependencies":[],"frontmatter":{"keywords":[],"exports":[{"format":"ipynb","filename":"EQ_Plots.ipynb","url":"/EQ_Plots-407f579742b0f389455f78096bde9343.ipynb"}]},"mdast":{"type":"root","children":[{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Increase the font size and bold the text for titles and axis labels globally\nplt.rcParams.update({\n    'axes.titlesize': 15,  # Increase the font size of the title\n    'axes.titleweight': 'bold',  # Bold the title font\n    'axes.labelsize': 15,  # Increase the font size of the axis labels\n    'axes.labelweight': 'bold',  # Bold the axis label font\n    'grid.alpha': 0.5,  # Set grid line transparency\n    'legend.fontsize': 12  # Set the legend font size\n})\n\n# Load the data from the provided files\nenergies_pre_eq = pd.read_csv('./Energies_trajectory_PreEQ.csv')\nenergies_post_eq = pd.read_csv('./Energies_trajectory_PostEQ.csv')\nthermo_pre_eq = pd.read_csv('./ThermodynamicQuantities_trajectory_PreEQ.csv')\nthermo_post_eq = pd.read_csv('./ThermodynamicQuantities_trajectory_PostEQ.csv')\n\n# Subtract the last value of pre-EQ time from post-EQ time\ntime_shift = energies_pre_eq['Time [ps]'].iloc[-1]\n\nenergies_post_eq['Time [ps]'] -= time_shift\nthermo_post_eq['Time [ps]'] -= time_shift\n\n# Create a figure and axis objects\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6), sharey=True)\n\n# Assign colors for energy and pressure plots\ncolor_energy = 'purple'\ncolor_pressure = 'green'\n\n# Plotting pre-EQ data\nax1.scatter(energies_pre_eq['Time [ps]'], energies_pre_eq['Potential Energy [kJ/mol]'], color=color_energy, label='Potential Energy', s=10)\nax1.set_ylabel('Potential Energy [kJ/mol]', color=color_energy)\nax1.tick_params(axis='y', labelcolor=color_energy)\nax1.set_xlabel('Time [ps]')\nax1.set_xscale('log')\n\n# Duplicate the x-axis for the second plot\nax2.scatter(energies_post_eq['Time [ps]'], energies_post_eq['Potential Energy [kJ/mol]'], color=color_energy, label='Potential Energy', s=10)\nax2.set_xlabel('Time [ps]')\nax2.set_xscale('log')\n\n# Plotting the pressure data on the second y-axis\nax3 = ax1.twinx()\nax3.scatter(thermo_pre_eq['Time [ps]'], thermo_pre_eq['Pressure'], color=color_pressure, label='Pressure', s=10)\nax3.set_ylabel('Pressure [atm]', color=color_pressure)\nax3.tick_params(axis='y', labelcolor=color_pressure)\n\n# Plotting the pressure data on the second y-axis for the second plot\nax4 = ax2.twinx()\nax4.scatter(thermo_post_eq['Time [ps]'], thermo_post_eq['Pressure'], color=color_pressure, label='Pressure', s=10)\nax4.tick_params(axis='y', labelcolor=color_pressure)\n\n# Set titles for subplots\nax1.set_title('Pre-EQ')\nax2.set_title('Post-EQ')\n\n# Move the legend to the bottom left of the left subplot\n#legend = ax1.legend(loc='lower left', bbox_to_anchor=(0, 1))\n\nplt.tight_layout()\n\n# Save the figure as EQ_stats.svg\nplt.savefig('EQ_stats.png')\n\nplt.show()\n","key":"vvjANAVclE"},{"type":"output","id":"YjUuGFJaaQtkMz48k8ox9","data":[{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"c7b1fc6c1289f719f7ab90033219ea35","path":"/c7b1fc6c1289f719f7ab90033219ea35.png"},"text/plain":{"content":"<Figure size 1500x600 with 4 Axes>","content_type":"text/plain"}}}],"key":"Zr61D33QmA"}],"data":{"type":"notebook-code"},"key":"zrX6G2ISR3"}],"key":"UbsoAEnqJ8"},"references":{"cite":{"order":[],"data":{}}}}