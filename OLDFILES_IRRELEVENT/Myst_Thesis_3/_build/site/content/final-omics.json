{"kind":"Notebook","sha256":"d604093549619a316408ceffd3c57e66c00d01fb6874893346a6fef9cdd88073","slug":"final-omics","location":"/Figures_Draft3/Fig1_OmicsPlot/Final_Omics.ipynb","dependencies":[],"frontmatter":{"keywords":[],"exports":[{"format":"ipynb","filename":"Final_Omics.ipynb","url":"/Final_Omics-704e29654d09416d7a3b01984b2fbe7b.ipynb"}]},"mdast":{"type":"root","children":[{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom mpl_toolkits.mplot3d import Axes3D\n\n# Increase the font size and bold the text for titles and axis labels globally\nplt.rcParams.update({\n    'axes.titlesize': 15,  # Increase the font size of the title\n    'axes.titleweight': 'bold',  # Bold the title font\n    'axes.labelsize': 15,  # Increase the font size of the axis labels\n    'axes.labelweight': 'bold',  # Bold the axis label font\n    'grid.alpha': 0.5,  # Set grid line transparency\n    'legend.fontsize': 12  # Set the legend font size\n})\n\n# Custom symmetric log function for charge transformation\ndef symlog(x, linthresh=1):\n    is_negative = x < 0\n    abs_x = np.abs(x)\n    abs_x = np.where(x == 0, 0, np.where(abs_x < linthresh, linthresh, np.log10(abs_x)))\n    return np.where(is_negative, -abs_x, abs_x)\n\n# Manually assigned colors for each type of species\nmanual_color_map = {\n    'tRNA Synthesis/RNA Degradation': '#1f77b4',\n    'Translation Factors': '#ff7f0e',\n    'Transcription': '#2ca02c',\n    'Ribosome': '#d62728',\n    'Protein Folding/Degradation': '#9467bd',\n    'Other Molecules': '#8c564b',\n    'Other Metabolites': '#e377c2',\n    'Nucleotides/Bases': '#7f7f7f',\n    'Metabolic Proteins': '#bcbd22',\n    'Cytoplasmic Protein': '#17becf',\n    'Amino Acids': '#1fa774',\n    'Water': '#1f77b4',\n    'Ions': '#aec7e8'\n}\n\n# Load the interaction matrix\ninteraction_matrix_path = \"InteractionMatrix.csv\"\ninteraction_df = pd.read_csv(interaction_matrix_path)\n\n# Function to prepare data, assign colors and markers\ndef prepare_data(file_path):\n    df = pd.read_excel(file_path)\n    df['Marker'] = df['Name'].apply(lambda x: '*' if x in interaction_df.columns and (interaction_df[x] == 5).any() else 'o')\n    df['Color'] = df['Tag'].apply(lambda x: manual_color_map.get(x, '#000000'))\n    df['Radii'] = pd.to_numeric(df.iloc[:, 4], errors='coerce')\n    df['ChargeTransformed'] = symlog(pd.to_numeric(df.iloc[:, 1], errors='coerce'))\n    df['LogNCopies'] = np.log(pd.to_numeric(df.iloc[:, 3], errors='coerce'))\n    return df\n\n# Function to plot data and save the figures, including grid lines and formatted titles/labels\ndef plot_data(df, title, file_name_prefix):\n    fig = plt.figure(figsize=(16, 12))\n    ax1 = fig.add_subplot(221, projection='3d')\n    ax2 = fig.add_subplot(222)\n    ax3 = fig.add_subplot(223)\n    ax4 = fig.add_subplot(224)\n    \n    for _, row in df.iterrows():\n        ax1.scatter(row['Radii'], row['ChargeTransformed'], row['LogNCopies'], color=row['Color'], marker=row['Marker'])\n        ax2.scatter(row['Radii'], row['ChargeTransformed'], color=row['Color'], marker=row['Marker'])\n        ax3.scatter(row['Radii'], row['LogNCopies'], color=row['Color'], marker=row['Marker'])\n        ax4.scatter(row['ChargeTransformed'], row['LogNCopies'], color=row['Color'], marker=row['Marker'])\n\n    # Set titles and labels with specific formatting\n    for ax in [ax2, ax3, ax4]: # Enable grid for 2D plots\n        ax.grid(True)\n\n    # Adjust title and axis labels for all plots\n    ax1.set_title('3D View', fontsize=14, fontweight='bold')\n    ax2.set_title('Radii vs. Charge', fontsize=14, fontweight='bold')\n    ax3.set_title('Radii vs. Log Num. Copies', fontsize=14, fontweight='bold')\n    ax4.set_title('Charge vs. Log Num. Copies', fontsize=14, fontweight='bold')\n\n    # Adjusting axis labels\n    ax_labels = [\n        ('Radii [nm]', 'Sym. Log Charge', 'Log Num. Copies'),\n        ('Radii [nm]', 'Sym. Log Charge'),\n        ('Radii [nm]', 'Log Num. Copies'),\n        ('Sym. Log Charge', 'Log Num. Copies')\n    ]\n    \n    for ax, labels in zip([ax1, ax2, ax3, ax4], ax_labels):\n        ax.set_xlabel(labels[0], fontsize=12, fontweight='bold')\n        ax.set_ylabel(labels[1], fontsize=12, fontweight='bold')\n        if len(labels) == 3:\n            ax.set_zlabel(labels[2], fontsize=12, fontweight='bold')\n\n    plt.suptitle(title, fontsize=16, fontweight='bold')\n    plt.tight_layout(rect=[0, 0, 1, 0.95])  # Adjust layout to fit suptitle\n    fig.savefig(f'{file_name_prefix}_plot.png')\n\n    # Creating and saving a separate plot for the legend\n    fig_legend, ax_legend = plt.subplots(figsize=(10, 2))\n    legend_elements = [plt.Line2D([0], [0], marker='o', color='w', markerfacecolor='k', label='General Interaction', markersize=10),\n                       plt.Line2D([0], [0], marker='*', color='w', markerfacecolor='k', label='Specific Interaction', markersize=15)]\n    for tag, color in manual_color_map.items():\n        legend_elements.append(plt.Line2D([0], [0], color=color, lw=4, label=tag))\n    ax_legend.legend(handles=legend_elements, loc='center', ncol=3, frameon=False)\n    ax_legend.axis('off')\n    fig_legend.savefig(f'{file_name_prefix}_legend.png')\n    plt.show()\n\n# Prepare everything\ndf_with_ions = prepare_data(\"SpeciesList_Annotated.ods\")\ndf_no_ions = prepare_data(\"SpeciesList-NoIons_Annotated.ods\")\n\n# Plot for Species With Ions (water_ions) and save\nplot_data(df_with_ions, \"Cytoplasm of Mycoplasmoides genitalium, with Water and Ions\", \"WithIons\")\n\n# Plot for Species Without Ions (NoWaterIons) and save\nplot_data(df_no_ions, \"Cytoplasm without Water and Ions\", \"NoIons\")\n","key":"YLfQ2YqAIp"},{"type":"output","id":"sw2RQPOyKg092FKfmPmqE","data":[{"name":"stderr","output_type":"stream","text":"/usr/lib64/python3.11/site-packages/pandas/core/arraylike.py:402: RuntimeWarning: divide by zero encountered in log10\n  result = getattr(ufunc, method)(*inputs, **kwargs)\n/usr/lib64/python3.11/site-packages/pandas/core/arraylike.py:402: RuntimeWarning: divide by zero encountered in log10\n  result = getattr(ufunc, method)(*inputs, **kwargs)\n"},{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"d89013c1abdb874b0833196835e9c366","path":"/d89013c1abdb874b0833196835e9c366.png"},"text/plain":{"content":"<Figure size 1600x1200 with 4 Axes>","content_type":"text/plain"}}},{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"b1850d3bdd6f7405cee17e1dd0195ba3","path":"/b1850d3bdd6f7405cee17e1dd0195ba3.png"},"text/plain":{"content":"<Figure size 1000x200 with 1 Axes>","content_type":"text/plain"}}}],"key":"HfP8OaJUbX"}],"data":{"type":"notebook-code"},"key":"mbHPo2LDkr"}],"key":"V0GJfADcVJ"},"references":{"cite":{"order":[],"data":{}}}}